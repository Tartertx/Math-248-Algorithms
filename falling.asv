%% Preamble
% Program name:     falling.m
% Author:           Timothy Tarter
% Due Date:         10/20/2025
% Purpose:          Build a function which can estimate when a ball will
%                   hit the ground when dropped from a certain height.


%% Variables
% mass = how much the ball weighs in kilograms
% airRes = air resistance
% startHeight = the starting height of the ball
% t0 = initial guess
% gravity = gravity constant
% maxIterations = the maximum number of iterations the user wants run
% newtonTable = the table output from the newton function
% 

%% Code
function falling()
    % introduce the user
    fprintf('Hi! This program is used to numerically find the time at which a ball hits the ground after being dropped from an initial height.\n')
    
    % get inputs
    mass = input('How much does the ball weigh in kilograms? ');
    airRes = input('How much (non-zero) air-resistance is there in kilograms per second? ');
    startHeight = input('What is the starting height of the ball in meters? ');
    t0 = input('What positive number would you like to use as an initial guess for the time (in seconds) at which the ball bounces? ');
    gravity = 9.8; %m/s^2
    maxIterations = input('What is the maximum number of iterations you would like to perform? ');
    
    %run the newton code and output the answer to the command line
    newtonTable = newton(t0, 0.001, maxIterations);
    fprintf('\nThe estimated number of seconds it takes the ball to hit the ground will be: %4.2f\n',newtonTable{3,2});

    % make the matrix of time against height
    time = linspace(0,newtonTable{3,2},100);
    height = startHeight - mass*gravity*time/airRes +mass^2*gravity/airRes^2*(1-exp(-airRes*time/mass));
    
    % make the plot
    figure
    plot(time,height,'b-','LineWidth',2)
    xlabel('Time in Seconds')             
    ylabel('Height in Meters')               
    title('Height x Time Plot')          
    %set the ground line and the marker
    hold on
    plot([0 max(time)], [0 0], 'k--', 'LineWidth', 1.5)
    plot([newtonTable{3,2}], [0], 'Marker' ,'o', 'MarkerSize', 20, 'MarkerFaceColor', 'r')

    % newton's method code, copied and pasted exactly, goes below
    function x_table = newton(x0,tol,n)    
        format longG % Makes numbers be displayed with 15 digits rather than just 5.
        if (nargin < 2)
            tol = 10^(-3); % Default value of relative error tolerance.
        end
        if (nargin < 3)
            n = 10^3;      % Default value of maximum number of allowed iterations.
        end
        x = zeros(2,1);  % Initialize as column vector.
        x(1) = inf;      % Arbitrarily large value for difference check
        x(2) = x0;       % Starting guess
        i = length(x);   % Initialize counter.



        while (abs(x(i) - x(i-1)) >= tol * abs(x(i))) %NOTE FOR DR CAPALDI: this was already in terms of absolute error when I downloaded it?
            i = i + 1; % Increment counter
            if (i > n) % Hit max iterations?
                fprintf('The method failed after %s iterations.\n', num2str(n))
                return
            end
            [fx,dfx] = f(x(i-1));     % Evaluate the function and its derivative at x(i-1).
            if (dfx == 0)
                error('Derivative of zero. Try a different starting value!')
            end
            x(i) = x(i-1) - fx / dfx; % Newton iteration
        end
        indices = (0:(i-2))';
        x_table = table(indices, x(2:end), 'VariableNames', {'i','x_i'});
            function [y,yprime] = f(x)
                % y is the function whose root we are finding.
                % yprime is the derivative of that function.
                % Replace the lines below with the function of interest and its
                % derivative.
                y = startHeight - mass*gravity*x/airRes +mass^2*gravity/airRes^2*(1-exp(-airRes*x/mass));
                yprime = mass*gravity/airRes*(exp(-airRes*x/mass)-1);
            end
    end
end